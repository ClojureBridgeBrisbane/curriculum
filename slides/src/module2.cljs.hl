(page "module2.html"
      (:require [hoplon.reveal :refer [slideshow intro bullet chapter slide
                                       notes highlight column quicklist]]
                [tailrecursion.hoplon.reload :refer [reload-all]]))

(when (= (-> js/window .-location .-search) "?dev")
  (print "Autoreloading")
  (reload-all))

(defn code-list
  [& lst]
  (interpose ", " (map code lst)))

(defelem hlclj
  [attrs children]
  (highlight (assoc attrs :class "clojure") children))

(html
  (head)
  (body
    (slideshow
     :theme "mozilla-theme.css"
     (intro
      :title "Module 2")
     (chapter
      :title "Data Structures"
      (slide
       :title "Data structures"
       (ul
        (li "Vectors")
        (li "Maps")
        (li "Lists")
        (li "Sets")
        (li "Sequences")))
      (slide
       :title "Vectors"
       (img :src "img/vector.png"
            :alt "vector"))
      (slide
       :title "Vectors"
       (hlclj
        ;;{{
        [1 2 3 4 5]
        ["a" 1 2 "b"]
        []
        ;;}}
        ))
      (slide
       :title "Vector functions"
       (hlclj
        ;;{{
        (vector? [:a :b :c])
        ;;=> true

        (vector :a :b :c)
        ;;=> [:a :b :c]

        (conj [:a :b] :c)
        ;;=> [:a :b :c]
        ;;}}
        ))
      (slide
       :title "Vector functions"
       (hlclj
        ;;{{
        (count [:a :b :c])
        ;;=> 3

        (nth [:a :b :c] 1)
        ;;=> :b

        (first [:a :b :c])
        ;;=> :a
        ;;}}
        ))
      (slide
       :title "Exercise: Make a vector"
       (p "Make a vector of all the places you've ever lived. Then use the "
          (code "nth")
          " function to get the current place you live from the vector."))
      (slide
       :title "Maps"
       (img :src "img/map.png"
            :alt "map"))
      (slide
       :title "Maps"
       (hlclj
        ;;{{
        {:first "Sally", :last "Brown", :occupation "programmer"}
        {:a 1, :b "two"}
        {}
        ;;}}
        ))
      (slide
       :title "Map functions"
       (hlclj
        ;;{{
        (map? {:first "Sally" :last "Brown"})
        ;;=> true

        (get {:first "Sally" :last "Brown"} :first)
        ;;=> "Sally"

        (get {:first "Sally"} :last :MISS)
        ;;=> :MISS
        ;;}}
        ))
      (slide
       :title "More map functions"
       (hlclj
        ;;{{
        (assoc {:first "Sally"} :last "Brown")
        ;;=> {:first "Sally", :last "Brown"}

        (dissoc {:first "Sally" :last "Brown"} :last)
        ;;=> {:first "Sally"}

        (merge {:first "Sally"} {:last "Brown"})
        ;;=> {:first "Sally", :last "Brown"}

        (count {:first "Sally" :last "Brown"})
        ;;=> 2
        ;;}}
        ))
      (slide
       :title "Even more map functions"
       (hlclj
        ;;{{
        (keys {:first "Sally" :last "Brown"})
        ;;=> (:first :last)

        (vals {:first "Sally" :last "Brown"})
        ;;=> ("Sally" "Brown")

        (into {} [[1 2] [3 4]])
       ;;=> {1 2, 3 4}
        ;;}}
        ))
      (slide
       :title "Maps and keywords"
       (hlclj
        ;;{{
        (:first {:first "Sally" :last "Brown"})
        ;;=> "Sally"

        (:last {:first "Sally"})
        ;;=> nil

        (:last {:first "Sally"} :MISS)
        ;;=> :MISS
        ;;}}
        ))
      (slide
       :title "Exercise: Modeling yourself"
       (p "Make a map representing yourself. Make sure it contains your first"
          " name and last name. Then, add your hometown to the map using "
          (code "assoc") " or " (code "merge") "."))
      (slide
       :title "Other data structures"
       (bullet "Lists")
       (img :src "img/list.png")
       (bullet "Sets")
       (img :src "img/set.png"))
      (slide
       :title "Other data structures"
       (hlclj
        ;;{{
        ;; Lists
        (list 1 2 3)
        (list "Sally" "Brown" :programmer)

        ;; Sets
        #{"red" "green" "blue" "yellow"}
        #{98 67 82 12 77}
        ;;}}
        ))
      (slide
       :title "Sequences"
       (ul
        (li "Sequences are an " (em "abstraction"))
        (li "All the data structures are sequences")
        (li "Many functions work on all sequences")
        (li (p "Other things that are sequences")
            (ul
             (li "lines in a file")
             (li "files in a directory")
             (li "records in a database")))
        ))
      (slide
       :title "Collections of collections"
       (hlclj
        ;;{{
        [{:name "Mercury"}
         {:name "Venus"}
         {:name "Earth" :moons ["The Moon"]}
         {:name "Mars" :moons ["Phobos" "Deimos"]}
         {:name "Jupiter"
          :moons ["Ganymede" "Callisto" "Io" "Europa"]}]
        ;;}}
        ))
      (slide
       :title "Exercise: Modeling your classmates"
       (ol
        (li "Take the map from the last exercise -- the one about you.")
        (li "Find two or three classmates. Ask their name and hometown. "
            " Make a vector of maps with their information.")
        (li "Then, add your information to their information using "
            (code "conj") ".")))
      )))))
