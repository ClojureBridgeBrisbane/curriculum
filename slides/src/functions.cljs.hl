(page "functions.html"
      (:require [hoplon.reveal :refer [slideshow intro bullet chapter slide
                                       notes highlight column quicklist]]
                [tailrecursion.hoplon.reload :refer [reload-all]]))

(when (= (-> js/window .-location .-search) "?dev")
  (print "Autoreloading")
  (reload-all))

(defn code-list
  [& lst]
  (interpose ", " (map code lst)))

(defelem hlclj
  [attrs children]
  (highlight (assoc attrs :class "clojure") children))

(html
  (head)
  (body
    (slideshow
     :theme "mozilla-theme.css"
     (intro
      :title "Functions")
     (chapter
      :title "Functions"
      (slide
       :title "What are functions?"
       (ul
        (li (code-list "count" "conj" "first"))
        (li (code-list "+" "-" "*" "/"))
        (li "A piece of code that takes values and returns a value")))
      (slide
       :title "An example function"
       (hlclj
        ;;{{
        (defn triple
          "Given a number, return 3 times that number."
          [x]
          (+ x x x))

        (triple 2)    ;=> 6
        (triple 3/2)  ;=> 9/2
        (triple 30.3) ;=> 90.9
        ;;}}
        ))
      (slide
       :title "An example function"
       (hlclj
        ;;{{
        (defn ; specifies that we are defining a function
          triple ; the name of this function

          ;; documentation, optional
          "Given a number, return 3 times that number."

          [x] ; list of arguments

          ;; body of function
          (+ x x x))
        ;;}}
        ))
      (slide
       :title "A function with multiple arguments."
       (hlclj
        ;;{{
        (defn average
          [x y] ; Functions can take multiple arguments.
          (/ (+ x y) 2))

        (average 2 3) ;=> 5/2
        ;;}}
        ))
    (slide
     :title "Exercise: make a function to format names"
     (p "The " (code "str") " function can take any number of arguments, and it "
        "concatenates them together to make a string.")
     (p "Write a function called "
        (code "format-name") " that takes two arguments, " (code "first-name")
        " and " (code "last-name") ". This function should output the name "
        "like so: Last, First."))
    (slide
     :title "Naming functions"
     (ul
      (li "Functions are named like any other value")
      (li (p "Predicate functions usually end in " (code "?"))
          (ul
           (li (code "zero?"))
           (li (code "vector?"))
           (li (code "empty?")))))))
     (chapter
      :title "Function library"
      (slide
       :title "Comparison functions"
       (hlclj
        ;;{{
        (= 1 2)    ;=> false
        (> 4 3)    ;=> true
        (>= 4 5)   ;=> false
        (< -1 1)   ;=> true
        (<= -1 -2) ;=> false
        ;;}}
        ))
      (slide
       :title "Using comparison functions"
       (hlclj
        ;;{{
        (defn vegetarian?
          [person]
          (= :vegetarian (get person :dietary-restrictions)))
        ;;}}
        ))
      (slide
       :title "String functions"
       (hlclj
        ;;{{
        (str "Chocolate" ", " "strawberry" ", and " "vanilla")
        ;;=> "Chocolate, strawberry, and vanilla"
        ;;}}
        ))
      (slide
       :title "Map functions"
       (ul
        (map (comp li code) ["assoc" "dissoc" "merge"])))
      (slide
       :title "Sequence functions"
       (ul
        (map (comp li code) ["count" "conj" "first" "rest" "get"]))))
     (chapter
      :title "Functions that take other functions"
      (slide
       :title (h3 (code "map"))
       (hlclj
        ;;{{
        (defn triple
          [x]
          (+ x x x))

        (map triple [1 2 3]) ;=> [3 6 9]
        ;;}}
        ))
        (slide
         :title (h3 (code "filter"))
         (hlclj
        ;;{{
        (defn greater-than-10
          [x]
          (> x 10))

        (filter greater-than-10 [9 10 11 12]) ;=> [11 12]
        ;;}}
        ))
      (slide
       :title (h3 (code "reduce"))
       (hlclj
        ;;{{
        (defn add
          [x y]
          (+ x y))

        (reduce add [1 2 3]) ;=> 6
        ;;}}
        ))
      (slide
       :title (h3 (code "reduce") " in action")
       (hlclj
        ;;{{
        (defn join-with-space
          [string1 string2]
          (str string1 " " string2))

        (reduce join-with-space
                ["i" "like" "peanut" "butter" "and" "jelly"])
        ;;=> "i like peanut butter and jelly"
        ;;}}
        ))
      (slide
       :title (h3 (code "reduce") " in action")
       (hlclj
        ;;{{
        (reduce join-with-space
                ["i" "like" "peanut" "butter" "and" "jelly"])
        ;;=> "i like peanut butter and jelly"

        (join-with-space "i" "like")
        (join-with-space "i like" "peanut")
        (join-with-space "i like peanut" "butter")
        (join-with-space "i like peanut butter" "and")
        (join-with-space "i like peanut butter and" "jelly")
        ;;}}
        ))

    (slide
     :title (h3 (code "sort-by"))
     (hlclj
      ;;{{
      (sort-by val > {:amy 3, :renee 5, :isabella 4})
      ;;=> ([:renee 5] [:isabella 4] [:amy 3])
      ;;}}
      ))
    (slide
     :title "Anonymous functions"
     (hlclj
      ;;{{
      (map (fn [x] (+ x x x)) [1 2 3]) ;=> [3 6 9]

      (reduce (fn [x y] (+ x y)) [1 2 3]) ;=> 6

      (reduce
        (fn [s1 s2] (str s1 " " s2))
        ["i" "like" "peanut" "butter" "and" "jelly"])
        ;=> "i like peanut butter and jelly"
      ;;}}
      ))
    (slide
      :title "Exercise: Find the average"
      (p "Create a function called " (code "average") " that takes a vector of "
         "numbers and returns the average of those numbers.")
      (p "Hint: you will need to use "
         (code "reduce") " and " (code "count") "."))
    (slide
     :title "Exercise: Get the names of people"
     (bullet "Create a function called " (code "get-names") " that takes a "
             "vector of maps of people and returns a vector of their names.")
     (hlclj
      ;;{{
      (get-names [{:first "Margaret" :last "Atwood"}
                  {:first "Doris" :last "Lessing"}
                  {:first "Ursula" :last "Le Guin"}
                  {:first "Alice" :last "Munro"}])

      ;;=> ["Margaret Atwood" "Doris Lessing"
      ;;    "Ursula Le Guin" "Alice Munro"]
      ;;}}
      ))
    (slide
     :title (h3 (code "let"))
     (hlclj
      ;;{{
      (defn spread
        "Given a collection of numbers, return the difference between the largest and smallest number."
        [numbers]
          (let [largest (reduce max numbers)
                smallest (reduce min numbers)]
            (- largest smallest)))

      (spread [10 7 3 -3 8]) ;=> 13
      ;;}}
      ))
    (slide
     :title "Exercise: Rewrite average"
     (p "Go back to the " (code "average") " function you created before and "
        "use " (code "let") " to make it easier to read."))))))
